// Code generated by ent, DO NOT EDIT.

package ent

import (
	"apiGrapqlEntgo/ent/course"
	"apiGrapqlEntgo/ent/predicate"
	"apiGrapqlEntgo/ent/subject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCode sets the "code" field.
func (su *SubjectUpdate) SetCode(s string) *SubjectUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableCode(s *string) *SubjectUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableName(s *string) *SubjectUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SubjectUpdate) SetDescription(s string) *SubjectUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableDescription(s *string) *SubjectUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetActive sets the "active" field.
func (su *SubjectUpdate) SetActive(b bool) *SubjectUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableActive(b *bool) *SubjectUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (su *SubjectUpdate) SetLastModifiedAt(t time.Time) *SubjectUpdate {
	su.mutation.SetLastModifiedAt(t)
	return su
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (su *SubjectUpdate) AddCourseIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddCourseIDs(ids...)
	return su
}

// AddCourses adds the "courses" edges to the Course entity.
func (su *SubjectUpdate) AddCourses(c ...*Course) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCourseIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearCourses clears all "courses" edges to the Course entity.
func (su *SubjectUpdate) ClearCourses() *SubjectUpdate {
	su.mutation.ClearCourses()
	return su
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (su *SubjectUpdate) RemoveCourseIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveCourseIDs(ids...)
	return su
}

// RemoveCourses removes "courses" edges to Course entities.
func (su *SubjectUpdate) RemoveCourses(c ...*Course) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubjectUpdate) defaults() {
	if _, ok := su.mutation.LastModifiedAt(); !ok {
		v := subject.UpdateDefaultLastModifiedAt()
		su.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubjectUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := subject.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subject.description": %w`, err)}
		}
	}
	return nil
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(subject.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subject.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.SetField(subject.FieldActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.LastModifiedAt(); ok {
		_spec.SetField(subject.FieldLastModifiedAt, field.TypeTime, value)
	}
	if su.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !su.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetCode sets the "code" field.
func (suo *SubjectUpdateOne) SetCode(s string) *SubjectUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableCode(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableName(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubjectUpdateOne) SetDescription(s string) *SubjectUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableDescription(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetActive sets the "active" field.
func (suo *SubjectUpdateOne) SetActive(b bool) *SubjectUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableActive(b *bool) *SubjectUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetLastModifiedAt sets the "last_modified_at" field.
func (suo *SubjectUpdateOne) SetLastModifiedAt(t time.Time) *SubjectUpdateOne {
	suo.mutation.SetLastModifiedAt(t)
	return suo
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (suo *SubjectUpdateOne) AddCourseIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddCourseIDs(ids...)
	return suo
}

// AddCourses adds the "courses" edges to the Course entity.
func (suo *SubjectUpdateOne) AddCourses(c ...*Course) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCourseIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearCourses clears all "courses" edges to the Course entity.
func (suo *SubjectUpdateOne) ClearCourses() *SubjectUpdateOne {
	suo.mutation.ClearCourses()
	return suo
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (suo *SubjectUpdateOne) RemoveCourseIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveCourseIDs(ids...)
	return suo
}

// RemoveCourses removes "courses" edges to Course entities.
func (suo *SubjectUpdateOne) RemoveCourses(c ...*Course) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCourseIDs(ids...)
}

// Where appends a list predicates to the SubjectUpdate builder.
func (suo *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubjectUpdateOne) defaults() {
	if _, ok := suo.mutation.LastModifiedAt(); !ok {
		v := subject.UpdateDefaultLastModifiedAt()
		suo.mutation.SetLastModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubjectUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := subject.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subject.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(subject.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subject.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.SetField(subject.FieldActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.LastModifiedAt(); ok {
		_spec.SetField(subject.FieldLastModifiedAt, field.TypeTime, value)
	}
	if suo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !suo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.CoursesTable,
			Columns: subject.CoursesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
