// Code generated by ent, DO NOT EDIT.

package course

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the course type in the database.
	Label = "course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldProfessorID holds the string denoting the professor_id field in the database.
	FieldProfessorID = "professor_id"
	// FieldSubjectID holds the string denoting the subject_id field in the database.
	FieldSubjectID = "subject_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastModifiedAt holds the string denoting the last_modified_at field in the database.
	FieldLastModifiedAt = "last_modified_at"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeProfessor holds the string denoting the professor edge name in mutations.
	EdgeProfessor = "professor"
	// Table holds the table name of the course in the database.
	Table = "courses"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "courses"
	// SubjectInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectInverseTable = "subjects"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "subject_id"
	// ProfessorTable is the table that holds the professor relation/edge.
	ProfessorTable = "courses"
	// ProfessorInverseTable is the table name for the Professor entity.
	// It exists in this package in order to avoid circular dependency with the "professor" package.
	ProfessorInverseTable = "professors"
	// ProfessorColumn is the table column denoting the professor relation/edge.
	ProfessorColumn = "professor_id"
)

// Columns holds all SQL columns for course fields.
var Columns = []string{
	FieldID,
	FieldYear,
	FieldPeriod,
	FieldProfessorID,
	FieldSubjectID,
	FieldCreatedAt,
	FieldLastModifiedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastModifiedAt holds the default value on creation for the "last_modified_at" field.
	DefaultLastModifiedAt func() time.Time
	// UpdateDefaultLastModifiedAt holds the default value on update for the "last_modified_at" field.
	UpdateDefaultLastModifiedAt func() time.Time
)

// OrderOption defines the ordering options for the Course queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByProfessorID orders the results by the professor_id field.
func ByProfessorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfessorID, opts...).ToFunc()
}

// BySubjectID orders the results by the subject_id field.
func BySubjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastModifiedAt orders the results by the last_modified_at field.
func ByLastModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastModifiedAt, opts...).ToFunc()
}

// BySubjectField orders the results by subject field.
func BySubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfessorField orders the results by professor field.
func ByProfessorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfessorStep(), sql.OrderByField(field, opts...))
	}
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
	)
}
func newProfessorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfessorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProfessorTable, ProfessorColumn),
	)
}
