package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"apiGrapqlEntgo/ent/course"
	"apiGrapqlEntgo/ent/professor"
	"apiGrapqlEntgo/ent/subject"
	"apiGrapqlEntgo/graph/generated"
	"apiGrapqlEntgo/graph/model"
	"context"
	"fmt"
	"time"
)

// CreateProfessor is the resolver for the createProfessor field.
func (r *mutationResolver) CreateProfessor(ctx context.Context, input model.NewProfessor) (*model.Professor, error) {
	birthDate, err := time.Parse(dateInputLayout, input.BirthDate)
	if err != nil {
		return nil, fmt.Errorf("parsing birthdate: %w", err)
	}

	prof, err := r.Cli.Professor.Create().
		SetID(input.ID).
		SetName(input.Name).
		SetLastName(input.LastName).
		SetBirthDate(birthDate).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("creating new professor: %w", err)
	}

	return marshalEntProfessor(prof), nil
}

// RemoveProfessor is the resolver for the removeProfessor field.
func (r *mutationResolver) RemoveProfessor(ctx context.Context, id string) (*model.Professor, error) {
	prof, err := r.Cli.Professor.Query().
		Where(professor.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting professor by ID: %w", err)
	}

	res := marshalEntProfessor(prof)
	if err = r.Cli.Professor.DeleteOneID(id).Exec(r.Ctx); err != nil {
		return nil, fmt.Errorf("removing professor %s: %w", id, err)
	}

	return res, nil
}

// UpdateProfessor is the resolver for the updateProfessor field.
func (r *mutationResolver) UpdateProfessor(ctx context.Context, id string, input model.NewProfessor) (*model.Professor, error) {
	prof, err := r.Cli.Professor.Query().
		Where(professor.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting professor by ID: %w", err)
	}

	birthDate, err := time.Parse(dateInputLayout, input.BirthDate)
	if err != nil {
		return nil, fmt.Errorf("parsing birthdate: %w", err)
	}

	prof, err = prof.Update().
		// SetID(input.ID). // Is it possible?
		SetName(input.Name).
		SetLastName(input.LastName).
		SetBirthDate(birthDate).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("updating professor %s: %w", id, err)
	}

	return marshalEntProfessor(prof), nil
}

// CreateSubject is the resolver for the createSubject field.
func (r *mutationResolver) CreateSubject(ctx context.Context, input model.NewSubject) (*model.Subject, error) {
	subj, err := r.Cli.Subject.Create().
		SetID(input.ID).
		SetName(input.Name).
		SetDescription(input.Description).
		SetActive(input.Active).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("creating new subject: %w", err)
	}

	return marshalEntSubject(subj), nil
}

// RemoveSubject is the resolver for the removeSubject field.
func (r *mutationResolver) RemoveSubject(ctx context.Context, id string) (*model.Subject, error) {
	subj, err := r.Cli.Subject.Query().
		Where(subject.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting subject by ID: %w", err)
	}

	res := marshalEntSubject(subj)
	if err = r.Cli.Subject.DeleteOneID(id).Exec(r.Ctx); err != nil {
		return nil, fmt.Errorf("removing subject %s: %w", id, err)
	}

	return res, nil
}

// UpdateSubject is the resolver for the updateSubject field.
func (r *mutationResolver) UpdateSubject(ctx context.Context, id string, input model.NewSubject) (*model.Subject, error) {
	subj, err := r.Cli.Subject.Query().
		Where(subject.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting subject by ID: %w", err)
	}

	subj, err = subj.Update().
		SetName(input.Name).
		SetDescription(input.Description).
		SetActive(input.Active).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("updating subject %s: %w", id, err)
	}

	return marshalEntSubject(subj), nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	cour, err := r.Cli.Course.Create().
		SetYear(input.Year).
		SetPeriod(input.Period).
		SetProfessorID(input.ProfessorID).
		SetSubjectID(input.SubjectID).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("creating new course: %w", err)
	}

	return marshalEntCourse(cour), nil
}

// RemoveCourseByID is the resolver for the removeCourseByID field.
func (r *mutationResolver) RemoveCourseByID(ctx context.Context, id int) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(course.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course by ID: %w", err)
	}

	res := marshalEntCourse(cour)
	if err = r.Cli.Course.DeleteOneID(id).Exec(r.Ctx); err != nil {
		return nil, fmt.Errorf("removing course %s: %w", id, err)
	}

	return res, nil
}

// RemoveCourse is the resolver for the removeCourse field.
func (r *mutationResolver) RemoveCourse(ctx context.Context, year int, period int, subjectID string) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(
			course.Year(year),
			course.Period(period),
			course.SubjectID(subjectID),
		).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course for subject_id %s in period %d-%d: %w", subjectID, year, period, err)
	}

	res := marshalEntCourse(cour)

	if err = r.Cli.Course.DeleteOne(cour).Exec(r.Ctx); err != nil {
		return nil, fmt.Errorf("removing course for subject_id %s in period %d-%d: %w", subjectID, year, period, err)
	}

	return res, nil
}

// UpdateCourseByID is the resolver for the updateCourseByID field.
func (r *mutationResolver) UpdateCourseByID(ctx context.Context, id int, input model.NewCourse) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(course.ID(id)).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course by ID: %w", err)
	}

	cour, err = cour.Update().
		SetYear(input.Year).
		SetPeriod(input.Period).
		SetProfessorID(input.ProfessorID).
		SetSubjectID(input.SubjectID).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("updating course %s: %w", id, err)
	}

	return marshalEntCourse(cour), nil
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, year int, period int, subjectID string, input model.NewCourse) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(
			course.Year(year),
			course.Period(period),
			course.SubjectID(subjectID),
		).
		Only(r.Ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course for subject_id %s in period %d-%d: %w", subjectID, year, period, err)
	}

	cour, err = cour.Update().
		SetYear(input.Year).
		SetPeriod(input.Period).
		SetProfessorID(input.ProfessorID).
		SetSubjectID(input.SubjectID).
		Save(r.Ctx)

	if err != nil {
		return nil, fmt.Errorf("updating course for subject_id %s in period %d-%d: %w", subjectID, year, period, err)
	}

	return marshalEntCourse(cour), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
