package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"apiGrapqlEntgo/ent/course"
	"apiGrapqlEntgo/ent/professor"
	"apiGrapqlEntgo/ent/subject"
	"apiGrapqlEntgo/graph/generated"
	"apiGrapqlEntgo/graph/model"
	"context"
	"fmt"
)

// Professors is the resolver for the professors field.
func (r *queryResolver) Professors(ctx context.Context) ([]*model.Professor, error) {
	profList, err := r.Cli.Professor.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting professors list: %w", err)
	}

	var res []*model.Professor
	for _, prof := range profList {
		res = append(res, marshalEntProfessor(prof))
	}
	return res, nil
}

// Professor is the resolver for the professor field.
func (r *queryResolver) Professor(ctx context.Context, id string) (*model.Professor, error) {
	prof, err := r.Cli.Professor.Query().
		Where(professor.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting professor by ID: %w", err)
	}

	return marshalEntProfessor(prof), nil
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*model.Subject, error) {
	subjList, err := r.Cli.Subject.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting subjects list: %w", err)
	}

	var res []*model.Subject
	for _, subj := range subjList {
		res = append(res, marshalEntSubject(subj))
	}
	return res, nil
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id string) (*model.Subject, error) {
	subj, err := r.Cli.Subject.Query().
		Where(subject.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting subject by ID: %w", err)
	}

	return marshalEntSubject(subj), nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courList, err := r.Cli.Course.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting courses list: %w", err)
	}

	var res []*model.Course
	for _, cour := range courList {
		res = append(res, marshalEntCourse(cour))
	}
	return res, nil
}

// CourseByID is the resolver for the courseByID field.
func (r *queryResolver) CourseByID(ctx context.Context, id int) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(course.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course by ID: %w", err)
	}

	return marshalEntCourse(cour), nil
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, year int, period int, subjectID string) (*model.Course, error) {
	cour, err := r.Cli.Course.Query().
		Where(
			course.Year(year),
			course.Period(period),
			course.SubjectID(subjectID),
		).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting course for subject_id %s in period %d-%d: %w", subjectID, year, period, err)
	}

	return marshalEntCourse(cour), nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
